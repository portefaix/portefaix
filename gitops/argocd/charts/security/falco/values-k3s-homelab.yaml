---
# Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

ingress:
  enabled: true
  entries:
  - name: falco-external
    host: falco.home.portefaix.xyz
    className: nginx
    annotations:
      hajimari.io/enable: "true"
      hajimari.io/icon: "logos:falco"
      hajimari.io/appName: "Falco"
      hajimari.io/group: "Security"
    labels: {}
  - name: falco-cloudflare
    host: falco.homelab.k3s.portefaix.xyz
    className: nginx
    annotations:
      external-dns.alpha.kubernetes.io/hostname: falco.homelab.k3s.portefaix.xyz
      nginx.ingress.kubernetes.io/auth-url: |-
        http://authentik.identity.svc.cluster.local/outpost.goauthentik.io/auth/nginx
      nginx.ingress.kubernetes.io/auth-signin: |-
        http://authentik.homelab.k3s.portefaix.xyz/outpost.goauthentik.io/start?rd=$escaped_request_uri
      nginx.ingress.kubernetes.io/auth-response-headers: |-
        Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
      nginx.ingress.kubernetes.io/auth-snippet: |
        proxy_set_header X-Forwarded-Host $http_host;
    labels:
      external-dns.io/provider: cloudflare

falco:
  resources:
    limits:
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 256Mi

  driver:
    initContainer:
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 30Mi

  falcoctl:
    artifact:
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 30Mi
    follow:
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 30Mi

  nodeSelector:
    kubernetes.io/arch: amd64

  # https://falco.org/docs/rules/
  # https://falco.org/docs/examples/
  customRules:
    portefaix-rules.yaml: |-
      - list: linux_shells
        items: [bash, zsh, ksh, sh, csh]
        priority: WARNING
        source: k8s_audit
        tags: [k8s, portefaix]
      - rule: run_shell_in_container
        desc: a shell was spawned by a non-shell program in a container. Container entrypoints are excluded.
        condition: >
          container.id != host
          and proc.name in (linux_shells)
        output: "Shell opened (user=%user.name container_id=%container.id container_name=%container.name)"
        priority: CRITICAL
        source: k8s_audit
        tags: [k8s, portefaix]

      - list: users_can_read_secrets
        items: [ ]
      - rule: K8s Secret Get Successfully
        desc: >
          Detect any attempt to get a secret. Service account tokens are excluded.
        condition: >
          secret and kget
          and kactivity
          and response_successful
          and (not ka.user.name startswith "system:")
          and not ka.user.name in (users_can_read_secrets)
        output: K8s Secret Get Successfully (user=%ka.user.name secret=%ka.target.name ns=%ka.target.namespace resource=%ka.target.resource resp=%ka.response.code decision=%ka.auth.decision reason=%ka.auth.reason)
        priority: ERROR
        source: k8s_audit
        tags: [k8s, portefaix]

  falcosidekick:
    replicaCount: 1
    config:
      alertmanager:
        hostport: "http://kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093"
      loki:
        hostport: http://loki-gateway.logging.svc.cluster.local:80
        endpoint: /loki/api/v1/push
        tenant: "portefaix-k3s-homelab"
        extralabels: "from,pod,container"
        minimumpriority: warning
        customheaders: ""
    resources:
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 50m
          memory: 50Mi
    webui:
      replicaCount: 1
      loglevel: "info"
      user: "admin:admin"
      disableauth: false
      # existingSecret: ""
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
        hosts:
        - host: falco.192.168.0.62
          paths:
          - path: /
            pathType: Prefix
      resources:
        limits:
          memory: 400Mi
        requests:
          cpu: 50m
          memory: 100Mi
      redis:
        enabled: true
        storageEnabled: true
        storageSize: "1Gi"
        storageClass: nfs-client
        resources:
          limits:
            memory: 300Mi
          requests:
            cpu: 50m
            memory: 100Mi
