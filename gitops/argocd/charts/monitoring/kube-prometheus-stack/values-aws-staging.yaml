# Copyright (C) 2021 Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
kube-prometheus-stack:
  alertmanager:
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: "arn:aws:iam::447241706233:role/alertmanager"
    # ingress:
    #   enabled: true
    #   annotations:
    #     kubernetes.io/ingress.class: alb
    #     alb.ingress.kubernetes.io/scheme: internet-facing
    #     alb.ingress.kubernetes.io/target-type: ip
    #     alb.ingress.kubernetes.io/success-codes: "200"
    #     alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    #     alb.ingress.kubernetes.io/group.name: portefaix-kube-prometheus-stack
    #     alb.ingress.kubernetes.io/auth-type: oidc
    #     alb.ingress.kubernetes.io/auth-idp-oidc: '{"issuer":"https://portefaix.eu.auth0.com","authorizationEndpoint":"https://portefaix.eu.auth0.com/authorize","tokenEndpoint":"https://portefaix.eu.auth0.com/oauth/token","userInfoEndpoint":"https://portefaix.eu.auth0.com/userinfo","secretName":"portefaix-aws-auth0"}'
    #     alb.ingress.kubernetes.io/auth-scope: 'email openid'
    #     alb.ingress.kubernetes.io/auth-on-unauthenticated-request: authenticate
    #     alb.ingress.kubernetes.io/tags: Project=Portefaix,Service=Alertmanager,Env=Staging,Made-By=FluxCD
    #     alb.ingress.kubernetes.io/healthcheck-interval-seconds: "5"
    #     alb.ingress.kubernetes.io/healthcheck-path: /
    #     alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    #     alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "4"
    #     alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    #     alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
    #     cert-manager.io/cluster-issuer: letsencrypt-prod
    #     external-dns.alpha.kubernetes.io/hostname: alertmanager.aws.portefaix.xyz
    #   hosts:
    #     - alertmanager.aws.portefaix.xyz
    #   path: /
    #   # tls:
    #   #   - secretName: alertmanager.aws.portefaix.xyz-tls
    #   #     hosts:
    #   #       - alertmanager.aws.portefaix.xyz
    alertmanagerSpec:
    #   externalUrl: https://alertmanager.aws.portefaix.xyz
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: gp2
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 1Gi
      resources:
        limits:
          cpu: 200m
          memory: 128Mi
        requests:
          cpu: 30m
          memory: 32Mi

  prometheus-node-exporter:
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi
  
  prometheusOperator:
    resources:
      limits:
        cpu: 300m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 96Mi
    prometheusConfigReloader:
      resources:
        limits:
          cpu: 100m
          memory: 100Mi
        requests:
          cpu: 50m
          memory: 50Mi

  prometheus:
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: "arn:aws:iam::447241706233:role/prometheus"
    # ingress:
    #   enabled: true
    #   annotations:
    #     kubernetes.io/ingress.class: alb
    #     alb.ingress.kubernetes.io/scheme: internet-facing
    #     alb.ingress.kubernetes.io/target-type: ip
    #     alb.ingress.kubernetes.io/success-codes: "200"
    #     alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    #     alb.ingress.kubernetes.io/group.name: portefaix-kube-prometheus-stack
    #     alb.ingress.kubernetes.io/auth-type: oidc
    #     alb.ingress.kubernetes.io/auth-idp-oidc: '{"issuer":"https://portefaix.eu.auth0.com","authorizationEndpoint":"https://portefaix.eu.auth0.com/authorize","tokenEndpoint":"https://portefaix.eu.auth0.com/oauth/token","userInfoEndpoint":"https://portefaix.eu.auth0.com/userinfo","secretName":"oidc-auth0"}'
    #     alb.ingress.kubernetes.io/auth-scope: 'email openid'
    #     alb.ingress.kubernetes.io/auth-on-unauthenticated-request: authenticate
    #     alb.ingress.kubernetes.io/tags: Project=Portefaix,Service=Prometheus,Env=Staging,Made-By=FluxCD
    #     alb.ingress.kubernetes.io/healthcheck-interval-seconds: "5"
    #     alb.ingress.kubernetes.io/healthcheck-path: /
    #     alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    #     alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "4"
    #     alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    #     alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
    #     cert-manager.io/cluster-issuer: letsencrypt-prod
    #     external-dns.alpha.kubernetes.io/hostname: prometheus.aws.portefaix.xyz
    #     # nginx.ingress.kubernetes.io/auth-url: https://forwardauth.aws.portefaix.xyz/verify?uri=$scheme://$host$request_uri
    #     # nginx.ingress.kubernetes.io/auth-signin: "https://forwardauth.aws.portefaix.xyz/?uri=$scheme://$host$request_uri"
    #   hosts:
    #     - prometheus.aws.portefaix.xyz
    #   path: /
    #   # tls:
    #   #   - secretName: prometheus.aws.portefaix.xyz-tls
    #   #     hosts:
    #   #       - prometheus.aws.portefaix.xyz
    prometheusSpec:
      # externalUrl: https://prometheus.aws.portefaix.xyz
      resources:
        limits:
          cpu: 600m
          memory: 4000Mi
        requests:
          cpu: 200m
          memory: 1000Mi
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: gp2
            # storageClassName: "csi-aws-ebs"
            resources:
              requests:
                storage: 10Gi
