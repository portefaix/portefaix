# Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

---
mimir-distributed:
  global:
    extraEnvFrom:
    - secretRef:
        name: mimir-cloudflare-credentials

  rbac:
    type: not

  mimir:
    config: |
      activity_tracker:
        filepath: /data/activity-tracker.log

      {{- if .Values.enterprise.enabled }}
      admin_api:
        leader_election:
          enabled: true
          ring:
            kvstore:
              store: "memberlist"

      admin_client:
        storage:
          type: s3
          s3:
            access_key_id: ${AWS_ACCESS_KEY_ID}
            secret_access_key: ${AWS_SECRET_ACCESS_KEY}
            endpoint: ${AWS_S3_ENDPOINT_NO_HTTPS}
            bucket_name: portefaix-homelab-metrics-admin
            insecure: false
      {{- end }}

      alertmanager:
        data_dir: /data
        enable_api: true
        external_url: /alertmanager
        {{- if .Values.alertmanager.zoneAwareReplication.enabled }}
        sharding_ring:
          zone_awareness_enabled: true
        {{- end }}

      alertmanager_storage:
        backend: s3
        s3:
          access_key_id: ${AWS_ACCESS_KEY_ID}
          secret_access_key: ${AWS_SECRET_ACCESS_KEY}
          endpoint: ${AWS_S3_ENDPOINT_NO_HTTPS}
          bucket_name: portefaix-homelab-metrics-ruler
          insecure: false

      {{- if .Values.enterprise.enabled }}
      auth:
        type: enterprise
      {{- end }}

      # This configures how the store-gateway synchronizes blocks stored in the bucket. It uses Minio by default for getting started (configured via flags) but this should be changed for production deployments.
      blocks_storage:
        backend: s3
        bucket_store:
          {{- if index .Values "chunks-cache" "enabled" }}
          chunks_cache:
            backend: memcached
            memcached:
              addresses: {{ include "mimir.chunksCacheAddress" . }}
              max_item_size: {{ mul (index .Values "chunks-cache").maxItemMemory 1024 1024 }}
              timeout: 450ms
          {{- end }}
          {{- if index .Values "index-cache" "enabled" }}
          index_cache:
            backend: memcached
            memcached:
              addresses: {{ include "mimir.indexCacheAddress" . }}
              max_item_size: {{ mul (index .Values "index-cache").maxItemMemory 1024 1024 }}
          {{- end }}
          {{- if index .Values "metadata-cache" "enabled" }}
          metadata_cache:
            backend: memcached
            memcached:
              addresses: {{ include "mimir.metadataCacheAddress" . }}
              max_item_size: {{ mul (index .Values "metadata-cache").maxItemMemory 1024 1024 }}
          {{- end }}
          sync_dir: /data/tsdb-sync
        s3:
          access_key_id: ${AWS_ACCESS_KEY_ID}
          secret_access_key: ${AWS_SECRET_ACCESS_KEY}
          endpoint: ${AWS_S3_ENDPOINT_NO_HTTPS}
          bucket_name: portefaix-homelab-metrics-tsdb
          insecure: false
        tsdb:
          dir: /data/tsdb

      {{- if .Values.enterprise.enabled }}
      cluster_name: "{{ .Release.Name }}"
      {{- end }}

      compactor:
        data_dir: "/data"

      frontend:
        align_queries_with_step: true
        log_queries_longer_than: 10s
        parallelize_shardable_queries: true
        {{- if index .Values "results-cache" "enabled" }}
        results_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.resultsCacheAddress" . }}
            max_item_size: {{ mul (index .Values "results-cache").maxItemMemory 1024 1024 }}
        cache_results: true
        {{- end }}
        {{- if .Values.query_scheduler.enabled }}
        scheduler_address: {{ template "mimir.fullname" . }}-query-scheduler-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}
        {{- end }}

      frontend_worker:
        {{- if .Values.query_scheduler.enabled }}
        scheduler_address: {{ template "mimir.fullname" . }}-query-scheduler-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}
        {{- else }}
        frontend_address: {{ template "mimir.fullname" . }}-query-frontend-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}
        {{- end }}

      {{- if and .Values.enterprise.enabled .Values.gateway.useDefaultProxyURLs }}
      gateway:
        proxy:
          admin_api:
            url: http://{{ template "mimir.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          alertmanager:
            url: http://{{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          compactor:
            url: http://{{ template "mimir.fullname" . }}-compactor.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          default:
            url: http://{{ template "mimir.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          distributor:
            url: dns:///{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.serverGrpcListenPort" . }}
          ingester:
            url: http://{{ template "mimir.fullname" . }}-ingester-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          query_frontend:
            url: http://{{ template "mimir.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          ruler:
            url: http://{{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          store_gateway:
            url: http://{{ template "mimir.fullname" . }}-store-gateway-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          {{- if and .Values.enterprise.enabled .Values.graphite.enabled }}
          graphite_write_proxy:
            url: http://{{ template "mimir.fullname" . }}-graphite-write-proxy.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          graphite_querier:
            url: http://{{ template "mimir.fullname" . }}-graphite-querier.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
          {{- end}}
      {{- end }}

      ingester:
        ring:
          final_sleep: 0s
          num_tokens: 512
          tokens_file_path: /data/tokens
          unregister_on_shutdown: false
          {{- if .Values.ingester.zoneAwareReplication.enabled }}
          zone_awareness_enabled: true
          {{- end }}

      ingester_client:
        grpc_client_config:
          max_recv_msg_size: 104857600
          max_send_msg_size: 104857600

      {{- if .Values.enterprise.enabled }}
      instrumentation:
        enabled: true
        distributor_client:
          address: dns:///{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.serverGrpcListenPort" . }}

      license:
        path: "/license/license.jwt"
      {{- end }}

      limits:
        # Adjust max query parallelism to 16x sharding, without sharding we can run 14d queries fully in parallel.
        # With sharding we can further shard each day another 16 times. 14 days * 16 shards = 224 subqueries.
        max_query_parallelism: 224

      memberlist:
        abort_if_cluster_join_fails: false
        compression_enabled: false
        join_members:
        - dns+{{ include "mimir.fullname" . }}-gossip-ring.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.memberlistBindPort" . }}

      querier:
        # With query sharding we run more but smaller queries. We must strike a balance
        # which allows us to process more sharded queries in parallel when requested, but not overload
        # queriers during non-sharded queries.
        max_concurrent: 16

      query_scheduler:
        # Increase from default of 100 to account for queries created by query sharding
        max_outstanding_requests_per_tenant: 1600

      ruler:
        alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.{{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}/alertmanager
        enable_api: true
        rule_path: /data

      ruler_storage:
        backend: s3
        s3:
          access_key_id: ${AWS_ACCESS_KEY_ID}
          secret_access_key: ${AWS_SECRET_ACCESS_KEY}
          endpoint: ${AWS_S3_ENDPOINT_NO_HTTPS}
          bucket_name: portefaix-homelab-metrics-ruler
          insecure: false

      runtime_config:
        file: /var/{{ include "mimir.name" . }}/runtime.yaml

      server:
        grpc_server_max_concurrent_streams: 1000
        grpc_server_max_connection_age: 2m
        grpc_server_max_connection_age_grace: 5m
        grpc_server_max_connection_idle: 1m

      store_gateway:
        sharding_ring:
          {{- if .Values.store_gateway.zoneAwareReplication.enabled }}
          kvstore:
            prefix: multi-zone/
          {{- end }}
          tokens_file_path: /data/tokens
          {{- if .Values.store_gateway.zoneAwareReplication.enabled }}
          zone_awareness_enabled: true
          {{- end }}

      {{- if and .Values.enterprise.enabled .Values.graphite.enabled }}
      graphite:
        enabled: true

        write_proxy:
          distributor_client:
            address: dns:///{{ template "mimir.fullname" . }}-distributor.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" .  }}

        querier:
          remote_read:
            query_address: http://{{ template "mimir.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" .  }}/prometheus

          graphite_fallback: http://{{ template "mimir.fullname" . }}-graphite-web.{{ .Release.Namespace}}.svc:{{ include "mimir.serverHttpListenPort" .  }}

          schemas:
            default_storage_schemas_file: /etc/graphite-proxy/storage-schemas.conf
            default_storage_aggregations_file: /etc/graphite-proxy/storage-aggregations.conf
          aggregation_cache:
            memcached:
              addresses: dnssrvnoa+{{ template "mimir.fullname" . }}-gr-aggr-cache.{{ .Release.Namespace}}.svc:11211
              timeout: 1s
          metric_name_cache:
            memcached:
              addresses: dnssrvnoa+{{ template "mimir.fullname" . }}-gr-metricname-cache.{{ .Release.Namespace}}.svc:11211
              timeout: 1s
      {{- end}}

  alertmanager:
    replicas: 1
    resources:
      limits:
        # cpu: 50m
        memory: 64Mi
      requests:
        cpu: 50m
        memory: 32Mi
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 100Mi
      storageClass: nfs-client
    zoneAwareReplication:
      enabled: false

  distributor:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi
    affinity: {}

  ingester:
    replicas: 3
    resources:
      limits:
        # cpu: 150m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 1Gi
      storageClass: nfs-client
    zoneAwareReplication:
      enabled: false

  overrides_exporter:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi

  ruler:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi

  querier:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi
    affinity: {}

  query_frontend:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 1Gi
      storageClass: nfs-client

  query_scheduler:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi

  store_gateway:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi
    affinity: {}
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 1Gi
      storageClass: nfs-client
    zoneAwareReplication:
      enabled: false

  compactor:
    replicas: 1
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi
    affinity: {}
    persistentVolume:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 1Gi
      storageClass: nfs-client

  memcachedExporter:
    enabled: true
    resources:
      limits:
        # cpu: 150m
        memory: 125Mi
      requests:
        cpu: 20m
        memory: 50Mi

  nginx:
    replicas: 1
    verboseLogging: true
    resources:
      limits:
        # cpu: 150m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 124Mi
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.identity.svc.cluster.local/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: "http://auth.192.168.0.208.nip.io/oauth2/sign_in?rd=http://$host$request_uri"
      hosts:
      - host: mimir.192.168.0.208.nip.io
        paths:
        - path: /
          pathType: Prefix
    affinity: null

  metaMonitoring:
    grafanaAgent:
      enabled: false
      logs:
        enabled: true
        remote:
          url: https://logs-prod-us-central1.grafana.net/loki/api/v1/push
          auth:
            username: 224
            passwordSecretName: mimir-grafana-cloud-credentials
            passwordSecretKey: grafana-cloud-api-key
      metrics:
        enabled: true
        remote:
          url: https://prometheus-us-central1.grafana.net/api/prom/push
          auth:
            username: 2590
            passwordSecretName: mimir-grafana-cloud-credentials
            passwordSecretKey: grafana-cloud-api-key


mimir-mixin:
  additionalLabels:
    portefaix.xyz/version: v0.43.0

  additionalAnnotations: {}

  monitor:
    additionalLabels:
      monitoring: portefaix

  grafana:
    folder: monitoring
