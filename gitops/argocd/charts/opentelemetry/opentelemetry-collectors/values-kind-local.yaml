# Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
mode: deployment

extraEnvs:
  - name: "K8S_NODE_NAME"
    valueFrom:
      fieldRef:
        fieldPath: "spec.nodeName"
  - name: "K8S_POD_NAME"
    valueFrom:
      fieldRef:
        fieldPath: "metadata.name"
  - name: "K8S_NAMESPACE"
    valueFrom:
      fieldRef:
        fieldPath: "metadata.namespace"

ports:
  - name: metric
    port: 9090
    protocol: TCP
    targetPort: 9090

resources:
  limits:
    # cpu: 500m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 512Mi

serviceMonitor:
  enabled: true
  extraLabels:
    monitoring: portefaix

config:
  receivers:

    hostmetrics:
      collection_interval: 60s
      scrapers:
        cpu: {}
        load: {}
        memory: {}
        disk: {}
        filesystem: {}
        network: {}

    jaeger:
      protocols:
        grpc:
          endpoint: 0.0.0.0:14250
        thrift_http:
          endpoint: 0.0.0.0:14268
        thrift_compact:
          endpoint: 0.0.0.0:6831

    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318

    # Collect own metrics
    prometheus:
      config:
        global:
          scrape_interval: 30s
          scrape_timeout: 10s
          evaluation_interval: 10s
        # scrape_configs:

          # - job_name: kubernetes-apiservers
          #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          #   kubernetes_sd_configs:
          #   - role: endpoints
          #   relabel_configs:
          #   - source_labels: [job]
          #     separator: ;
          #     regex: (.*)
          #     target_label: __tmp_prometheus_job_name
          #     replacement: $1
          #     action: replace
          #   - action: keep
          #     regex: default;kubernetes;https
          #     source_labels:
          #     - __meta_kubernetes_namespace
          #     - __meta_kubernetes_service_name
          #     - __meta_kubernetes_endpoint_port_name
          #   - action: keep
          #     regex: $K8S_NODE_NAME
          #     source_labels: [__meta_kubernetes_endpoint_node_name]
          #   scheme: https
          #   tls_config:
          #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          #     insecure_skip_verify: true

          # - job_name: kubernetes-nodes
          #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          #   kubernetes_sd_configs:
          #   - role: node
          #   relabel_configs:
          #   - action: labelmap
          #     regex: __meta_kubernetes_node_label_(.+)
          #   - replacement: kubernetes.default.svc:443
          #     target_label: __address__
          #   - regex: (.+)
          #     replacement: /api/v1/nodes/$$1/proxy/metrics
          #     source_labels:
          #     - __meta_kubernetes_node_name
          #     target_label: __metrics_path__
          #   - action: keep
          #     regex: $K8S_NODE_NAME
          #     source_labels: [__meta_kubernetes_endpoint_node_name]
          #   scheme: https
          #   tls_config:
          #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          #     insecure_skip_verify: true

          # - job_name: kubernetes-nodes-cadvisor
          #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          #   kubernetes_sd_configs:
          #   - role: node
          #   relabel_configs:
          #   - action: labelmap
          #     regex: __meta_kubernetes_node_label_(.+)
          #   - replacement: kubernetes.default.svc:443
          #     target_label: __address__
          #   - regex: (.+)
          #     replacement: /api/v1/nodes/$$1/proxy/metrics/cadvisor
          #     source_labels:
          #     - __meta_kubernetes_node_name
          #     target_label: __metrics_path__
          #   - action: keep
          #     regex: $K8S_NODE_NAME
          #     source_labels: [__meta_kubernetes_endpoint_node_name]
          #   scheme: https
          #   tls_config:
          #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          #     insecure_skip_verify: true

          # - job_name: kubernetes-service-endpoints
          #   kubernetes_sd_configs:
          #   - role: endpoints
          #   relabel_configs:
          #   - action: keep
          #     regex: true
          #     source_labels:
          #     - __meta_kubernetes_service_annotation_prometheus_io_scrape
          #   - action: replace
          #     regex: (https?)
          #     source_labels:
          #     - __meta_kubernetes_service_annotation_prometheus_io_scheme
          #     target_label: __scheme__
          #   - action: replace
          #     regex: (.+)
          #     source_labels:
          #     - __meta_kubernetes_service_annotation_prometheus_io_path
          #     target_label: __metrics_path__
          #   - action: replace
          #     regex: ([^:]+)(?::\d+)?;(\d+)
          #     replacement: $$1:$$2
          #     source_labels:
          #     - __address__
          #     - __meta_kubernetes_service_annotation_prometheus_io_port
          #     target_label: __address__
          #   - action: labelmap
          #     regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
          #     replacement: __param_$$1
          #   - action: labelmap
          #     regex: __meta_kubernetes_service_label_(.+)
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_namespace
          #     target_label: kubernetes_namespace
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_service_name
          #     target_label: kubernetes_name
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_pod_node_name
          #     target_label: kubernetes_node
          #   - action: keep
          #     regex: $K8S_NODE_NAME
          #     source_labels: [__meta_kubernetes_endpoint_node_name]

          # - job_name: kubernetes-service-endpoints-slow
          #   kubernetes_sd_configs:
          #   - role: endpoints
          #   relabel_configs:
          #   - action: keep
          #     regex: true
          #     source_labels:
          #     - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
          #   - action: replace
          #     regex: (https?)
          #     source_labels:
          #     - __meta_kubernetes_service_annotation_prometheus_io_scheme
          #     target_label: __scheme__
          #   - action: replace
          #     regex: (.+)
          #     source_labels:
          #     - __meta_kubernetes_service_annotation_prometheus_io_path
          #     target_label: __metrics_path__
          #   - action: replace
          #     regex: ([^:]+)(?::\d+)?;(\d+)
          #     replacement: $$1:$$2
          #     source_labels:
          #     - __address__
          #     - __meta_kubernetes_service_annotation_prometheus_io_port
          #     target_label: __address__
          #   - action: labelmap
          #     regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
          #     replacement: __param_$$1
          #   - action: labelmap
          #     regex: __meta_kubernetes_service_label_(.+)
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_namespace
          #     target_label: kubernetes_namespace
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_service_name
          #     target_label: kubernetes_name
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_pod_node_name
          #     target_label: kubernetes_node
          #   - action: keep
          #     regex: $K8S_NODE_NAME
          #     source_labels: [__meta_kubernetes_endpoint_node_name]
          #   scrape_interval: 5m
          #   scrape_timeout: 30s

          # - job_name: kubernetes-services
          #   kubernetes_sd_configs:
          #   - role: service
          #   metrics_path: /probe
          #   params:
          #     module:
          #     - http_2xx
          #   relabel_configs:
          #   - action: keep
          #     regex: true
          #     source_labels:
          #     - __meta_kubernetes_service_annotation_prometheus_io_probe
          #   - source_labels:
          #     - __address__
          #     target_label: __param_target
          #   - replacement: blackbox
          #     target_label: __address__
          #   - source_labels:
          #     - __param_target
          #     target_label: instance
          #   - action: labelmap
          #     regex: __meta_kubernetes_service_label_(.+)
          #   - source_labels:
          #     - __meta_kubernetes_namespace
          #     target_label: kubernetes_namespace
          #   - source_labels:
          #     - __meta_kubernetes_service_name
          #     target_label: kubernetes_name
          #   - action: keep
          #     regex: $K8S_NODE_NAME
          #     source_labels: [__meta_kubernetes_endpoint_node_name]

          # - job_name: kubernetes-pods
          #   kubernetes_sd_configs:
          #   - role: pod
          #   relabel_configs:
          #   - action: keep
          #     regex: true
          #     source_labels:
          #     - __meta_kubernetes_pod_annotation_prometheus_io_scrape
          #   - action: replace
          #     regex: (https?)
          #     source_labels:
          #     - __meta_kubernetes_pod_annotation_prometheus_io_scheme
          #     target_label: __scheme__
          #   - action: replace
          #     regex: (.+)
          #     source_labels:
          #     - __meta_kubernetes_pod_annotation_prometheus_io_path
          #     target_label: __metrics_path__
          #   - action: replace
          #     regex: ([^:]+)(?::\d+)?;(\d+)
          #     replacement: $$1:$$2
          #     source_labels:
          #     - __address__
          #     - __meta_kubernetes_pod_annotation_prometheus_io_port
          #     target_label: __address__
          #   - action: labelmap
          #     regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
          #     replacement: __param_$$1
          #   - action: labelmap
          #     regex: __meta_kubernetes_pod_label_(.+)
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_namespace
          #     target_label: kubernetes_namespace
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_pod_name
          #     target_label: kubernetes_pod_name
          #   - action: drop
          #     regex: Pending|Succeeded|Failed|Completed
          #     source_labels:
          #     - __meta_kubernetes_pod_phase
          #   - action: keep
          #     regex: $K8S_NODE_NAME
          #     source_labels: [__meta_kubernetes_endpoint_node_name]
          
          # - job_name: kubernetes-pods-slow
          #   scrape_interval: 5m
          #   scrape_timeout: 30s          
          #   kubernetes_sd_configs:
          #   - role: pod
          #   relabel_configs:
          #   - action: keep
          #     regex: true
          #     source_labels:
          #     - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
          #   - action: replace
          #     regex: (https?)
          #     source_labels:
          #     - __meta_kubernetes_pod_annotation_prometheus_io_scheme
          #     target_label: __scheme__
          #   - action: replace
          #     regex: (.+)
          #     source_labels:
          #     - __meta_kubernetes_pod_annotation_prometheus_io_path
          #     target_label: __metrics_path__
          #   - action: replace
          #     regex: ([^:]+)(?::\d+)?;(\d+)
          #     replacement: $$1:$$2
          #     source_labels:
          #     - __address__
          #     - __meta_kubernetes_pod_annotation_prometheus_io_port
          #     target_label: __address__
          #   - action: labelmap
          #     regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
          #     replacement: __param_$1
          #   - action: labelmap
          #     regex: __meta_kubernetes_pod_label_(.+)
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_namespace
          #     target_label: namespace
          #   - action: replace
          #     source_labels:
          #     - __meta_kubernetes_pod_name
          #     target_label: pod
          #   - action: drop
          #     regex: Pending|Succeeded|Failed|Completed
          #     source_labels:
          #     - __meta_kubernetes_pod_phase
          #   - action: keep
          #     regex: $K8S_NODE_NAME
          #     source_labels: [__meta_kubernetes_endpoint_node_name]
          
          # - job_name: kube-state-metrics
          #   scrape_interval: 30s
          #   scrape_timeout: 10s
          #   kubernetes_sd_configs:
          #   - role: endpoints
          #     kubeconfig_file: ""
          #     follow_redirects: true
          #     enable_http2: true
          #     namespaces:
          #       own_namespace: false
          #       names:
          #       - monitoring
          #   honor_labels: true
          #   honor_timestamps: true
          #   metrics_path: /metrics
          #   scheme: http
          #   follow_redirects: true
          #   enable_http2: true
          #   relabel_configs:
          #   - source_labels: [job]
          #     separator: ;
          #     regex: (.*)
          #     target_label: __tmp_prometheus_job_name
          #     replacement: $1
          #     action: replace
          #   - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name, __meta_kubernetes_service_labelpresent_app_kubernetes_io_name]
          #     separator: ;
          #     regex: (kube-state-metrics);true
          #     replacement: $1
          #     action: keep
          #   - source_labels: [__meta_kubernetes_endpoint_port_name]
          #     separator: ;
          #     regex: http
          #     replacement: $1
          #     action: keep
          #   - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
          #     separator: ;
          #     regex: Node;(.*)
          #     target_label: node
          #     replacement: ${1}
          #     action: replace
          #   - source_labels: [__meta_kubernetes_endpoint_address_target_kind, __meta_kubernetes_endpoint_address_target_name]
          #     separator: ;
          #     regex: Pod;(.*)
          #     target_label: pod
          #     replacement: ${1}
          #     action: replace
          #   - source_labels: [__meta_kubernetes_namespace]
          #     separator: ;
          #     regex: (.*)
          #     target_label: namespace
          #     replacement: $1
          #     action: replace
          #   - source_labels: [__meta_kubernetes_service_name]
          #     separator: ;
          #     regex: (.*)
          #     target_label: service
          #     replacement: $1
          #     action: replace
          #   - source_labels: [__meta_kubernetes_pod_name]
          #     separator: ;
          #     regex: (.*)
          #     target_label: pod
          #     replacement: $1
          #     action: replace
          #   - source_labels: [__meta_kubernetes_pod_container_name]
          #     separator: ;
          #     regex: (.*)
          #     target_label: container
          #     replacement: $1
          #     action: replace
          #   - source_labels: [__meta_kubernetes_service_name]
          #     separator: ;
          #     regex: (.*)
          #     target_label: job
          #     replacement: ${1}
          #     action: replace
          #   - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
          #     separator: ;
          #     regex: (.+)
          #     target_label: job
          #     replacement: ${1}
          #     action: replace
          #   - separator: ;
          #     regex: (.*)
          #     target_label: endpoint
          #     replacement: http
          #     action: replace
          #   - source_labels: [__address__]
          #     separator: ;
          #     regex: (.*)
          #     modulus: 1
          #     target_label: __tmp_hash
          #     replacement: $1
          #     action: hashmod
          #   - source_labels: [__tmp_hash]
          #     separator: ;
          #     regex: "0"
          #     replacement: $1
          #     action: keep
            

    # zipkin:
    #   endpoint: 0.0.0.0:9411

    # k8s_cluster:
    #   collection_interval: 60s
    #   distribution: kubernetes
    #   node_conditions_to_report: [Ready, DiskPressure, MemoryPressure, PIDPressure, NetworkUnavailable]
    #   allocatable_types_to_report: [cpu, memory, ephemeral-storage, storage]

    # k8s_events:
    #   auth_type: "serviceAccount"

    # kubeletstats:
    #   collection_interval: 60s
    #   auth_type: "serviceAccount"
    #   endpoint: "${K8S_NODE_NAME}:10250"
    #   insecure_skip_verify: true

    # receiver_creator:
    #    watch_observers: [k8s_observer]
    #    receivers:
    #       kubeletstats:
    #         rule: type == "k8s.node"
    #         config:
    #           collection_interval: 60s
    #           auth_type: "serviceAccount"
    #           # endpoint: "https://${K8S_NODE_NAME}:10250"
    #           # auth_type: "none"
    #           # endpoint: "http://${K8S_NODE_NAME}:10255"
    #           # insecure_skip_verify: true
    #           endpoint: "`endpoint`:`kubelet_endpoint_port`"
    #           insecure_skip_verify: true
    #           extra_metadata_labels:
    #             - container.id
    #             - k8s.volume.type
    #           metric_groups:
    #             - node
    #             - pod
    #             - volume
    #             - container

  processors:

    batch:
      send_batch_max_size: 1000
      timeout: 30s
      send_batch_size : 800

    # Data sources: traces, metrics, logs
    memory_limiter:
      limit_percentage: 90
      spike_limit_percentage: 30
      check_interval: 5s

    # metricstransform:
    #   transforms:
    #      include: .+
    #      match_type: regexp
    #      action: update
    #      operations:
    #        - action: add_label
    #          new_label: kubernetes.cluster.id
    #          new_value: kind-local
    #        - action: add_label
    #          new_label: kubernetes.name
    #          new_value: local

    # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md
    # resourcedetection/gce:
    #   detectors: [env, gce, gke]
    #   timeout: 2s
    #   override: true

    k8sattributes:
      auth_type: serviceAccount
      passthrough: false
      filter:
        node_from_env_var: K8S_NODE_NAME
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.cluster.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.start_time
      pod_association:
        - from: resource_attribute
          name: k8s.pod.uid

  exporters:

    logging:
      loglevel: info

    prometheus:
      endpoint: "0.0.0.0:9090"
      metric_expiration: 180m
      resource_to_telemetry_conversion:
        enabled: true

    # Data sources: metrics
    # prometheusremotewrite/prom:
    #   endpoint: "http://prometheus-operated.monitoring.svc.cluster.local:9090/api/v1/write"

    # prometheusremotewrite/mimir:
    #   endpoint: "http://mimir.monitoring.svc.cluster.local:9411/api/prom/push"

    # Data sources: logs
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/lokiexporter/README.md
    loki:
      endpoint: "http://loki.logging.svc.cluster.local:3100/loki/api/v1/push"
      tenant_id: "local"
      labels:
        resource:
          # Allowing 'container.name' attribute and transform it to 'container_name', which is a valid Loki label name.
          container.name: "container_name"
          k8s.cluster.name: "k8s_cluster_name"
          k8s.event.reason: "k8s_event_reason"
          k8s.object.kind: "k8s_object_kind"
          k8s.object.name: "k8s_object_name"
          k8s.object.uid: "k8s_object_uid"
          k8s.object.fieldpath: "k8s_object_fieldpath"
          k8s.object.api_version: "k8s_object_api_version"
        attributes:
          k8s.event.reason: "k8s_event_reason"
          k8s.event.action: "k8s_event_action"
          k8s.event.start_time: "k8s_event_start_time"
          k8s.event.name: "k8s_event_name"
          k8s.event.uid: "k8s_event_uid"
          k8s.namespace.name: "k8s_namespace_name"
          k8s.event.count: "k8s_event_count"
        record:
          # Adds 'traceID' as a log label, seen as 'traceid' in Loki.
          traceID: "traceid"
      # headers:
      #   "X-Custom-Header": "portefaix_homelab"

    # Data sources: traces, metrics, logs
    otlp/tempo:
      endpoint: tempo.tracing.svc.cluster.local:4317
      tls:
        insecure_skip_verify: true
        insecure: true

    # Data sources: traces, metrics, logs
    # otlp/honeycomb:
    #   endpoint: "api.honeycomb.io:443"
    #   headers:
    #     "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
    #     "x-honeycomb-dataset": "portefaix-homelab" # for Metrics

    # Data sources: traces, metrics, logs
    # otlp/aspecto:
    #   endpoint: otelcol.aspecto.io:4317
    #   headers:
    #     Authorization: ${ASPECTO_API_KEY}

    # datadog:
    #   env: prod
    #   service: opentelemetry
    #   tags:
    #     - cloud:homelab
    #   api:
    #     key: ${DATADOG_API_KEY}
    #     site: datadoghq.eu

    # mezmo:
    #   ingest_url: "https://logs.logdna.com/log/ingest"
    #   ingest_key: "${MEZMO_API_KEY}"

  extensions:

    health_check: {}

    memory_ballast:
      size_in_percentage: 20

    # k8s_observer:
    #   auth_type: serviceAccount
    #   node: ${K8S_NODE_NAME}
    #   observe_pods: true
    #   observe_nodes: true

    zpages:
      endpoint: 0.0.0.0:55679

  service:

    telemetry:
      metrics:
        address: 0.0.0.0:8888

    extensions:
      - health_check
      - memory_ballast
      # - k8s_observer
      - zpages

    pipelines:

      logs:
        receivers:
          - otlp
          # - k8s_events
        processors:
          - batch
          - k8sattributes
          - memory_limiter
        exporters:
          - logging
          # - loki

      metrics:
        receivers:
          - hostmetrics
          - prometheus
          # - k8s_cluster
          # - kubeletstats
          # - receiver_creator
          - otlp
        processors:
          # - memory_limiter
          # - metricstransform
          - k8sattributes
          # - resourcedetection/gce
          - batch
        exporters:
          - logging
          - prometheus
          # - prometheusremotewrite/prom
          # - prometheusremotewrite/mimir
          # - datadog

      traces:
        receivers:
          - otlp
        processors:
          - batch
          - k8sattributes
          - memory_limiter
        exporters:
          - logging
          # - otlp/tempo
