---
# SPDX-FileCopyrightText: Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
# SPDX-License-Identifier: Apache-2.0

grafanaDashboard:
  enabled: true
  grafanaOperator:
    enabled: true
    matchLabels:
      grafana.com/dashboards: portefaix

opentelemetry:
  otelExtraEnvs: &otelExtraEnvs
    extraEnvs: []
    # - name: OTEL_RESOURCE_ATTRIBUTES
    #   value: "k8s.pod.ip=$(MY_POD_IP)"
    # - name: K8S_NAMESPACE
    #   valueFrom:
    #     fieldRef:
    #       apiVersion: v1
    #       fieldPath: metadata.namespace

  processors:
    otelResourcedetection: &otelResourcedetection
      resourcedetection:
        detectors:
        - system
        - env
        timeout: 2s
        override: false

    # otelAttributes: &otelAttributes
    #   attributes:
    #     actions:
    #     - action: insert
    #       key: k8s.cluster.name
    #       value: ${env:KUBE_CLUSTER_NAME}
    #     - action: insert
    #       key: k8s.node.name
    #       value: ${KUBE_NODE_NAME}

    otelK8sAttributes: &otelK8sAttributes
      k8sattributes:
        extract:
          labels:
          - from: pod
            key: app.kubernetes.io/name
            tag_name: service.name
          - from: pod
            key: app.kubernetes.io/name
            tag_name: k8s.app.name
          - from: pod
            key: k8s-app
            tag_name: service.name
          - from: pod
            key: app.kubernetes.io/instance
            tag_name: k8s.app.instance
          - from: pod
            key: app.kubernetes.io/version
            tag_name: service.version
          - from: pod
            key: app.kubernetes.io/component
            tag_name: k8s.app.component
          - from: pod
            key: app.kubernetes.io/part-of
            tag_name: k8s.app.part_of
          - from: pod
            key: app.kubernetes.io/managed-by
            tag_name: k8s.app.managed_by
          # Extract all labels
          # - tag_name: $$1
          #   key_regex: (.*)
          #   from: pod
          # annotations:
          # Extract all annotations
          # - tag_name: $$1
          #   key_regex: (.*)
          #   from: pod
          metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.start_time
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.name
          - container.image.tag
          - k8s.container.name
          - container.id
          - container.image.name
          - container.image.tag
          - container.id
          - k8s.cluster.uid
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
          - from: resource_attribute
            name: k8s.node.name
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
        - sources:
          - from: connection


  service:
    otelTelemetry: &otelTelemetry
      logs:
        level: info
        encoding: json
      metrics:
        address: ${env:MY_POD_IP}:8888


opentelemetry-logs:
  additionalLabels:
    app.kubernetes.io/part-of: opentelemetry-collector
    portefaix.xyz/version: v0.54.0

  mode: daemonset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: true
      includeCollectorLogs: true
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: false
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: false

  extraEnvs:
  <<: *otelExtraEnvs

  config:
    receivers:
      jaeger:
      zipkin:
      otlp:

    processors:
      <<: *otelResourcedetection
      <<: *otelK8sAttributes
      transform:
        log_statements:
        - context: resource
          statements:
          - set(attributes["k8s.cluster.name"], "${CLUSTER_NAME}")
          - set(attributes["cluster"], "${CLUSTER_NAME}")
          - set(attributes["loki.attribute.labels"], "node, deployment, namespace, container, pod, app")

    exporters:
      otlphttp:
        endpoint: http://opentelemetry-collector-opentelemetry-gateway.opentelemetry.svc.cluster.local:4318

    service:
      telemetry:
        <<: *otelTelemetry
      pipelines:
        logs:
          receivers:
          - filelog
          processors:
          - resourcedetection
          - k8sattributes
          - memory_limiter
          - transform
          - batch
          exporters:
          - debug
          - otlphttp
        metrics:
        traces:

  ports:
    otlp:
      enabled: false
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: false
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  securityContext:
    runAsUser: 0
    runAsGroup: 0

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-metrics:
  additionalLabels:
    app.kubernetes.io/part-of: opentelemetry-collector
    portefaix.xyz/version: v0.54.0

  mode: daemonset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: true
    kubernetesAttributes:
      enabled: true
    kubeletMetrics:
      enabled: true
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: false

  extraEnvs:
  <<: *otelExtraEnvs

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp: null
      #   protocols:
      #     grpc:
      #       endpoint: ${env:MY_POD_IP}:4317
      #     http:
      #       endpoint: ${env:MY_POD_IP}:4318
      kubeletstats:
        insecure_skip_verify: true
        metric_groups:
        - node
        - pod
        - volume
        - container
        metrics:
          container.cpu.usage:
            enabled: true
          k8s.node.cpu.usage:
            enabled: true
          k8s.node.uptime:
            enabled: true
          k8s.pod.cpu.usage:
            enabled: true
          k8s.pod.uptime:
            enabled: true
      hostmetrics:
        scrapers:
          cpu:
            metrics:
              system.cpu.logical.count:
                enabled: true
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
              system.memory.limit:
                enabled: true
          load: {}
          disk: {}
          filesystem:
            exclude_fs_types:
              fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
              - /dev/*
              - /proc/*
              - /sys/*
              - /run/k3s/containerd/*
              - /var/lib/docker/*
              - /var/lib/kubelet/*
              - /snap/*
            metrics:
              system.filesystem.utilization:
                enabled: true
          network: {}
          paging: {}
          processes: {}
          process: {}
            # mute_process_user_error: true
            # metrics:
            #   process.cpu.utilization:
            #     enabled: true
            #   process.memory.utilization:
            #     enabled: true
            #   process.threads:
            #     enabled: true
            #   process.paging.faults:
            #     enabled: true


    processors:
      <<: *otelResourcedetection
      <<: *otelK8sAttributes
      transform:
        metric_statements:
        - context: resource
          statements:
          - set(attributes["k8s.cluster.name"], "${CLUSTER_NAME}")
          - set(attributes["cluster"], "${CLUSTER_NAME}")

    exporters:
      otlphttp:
        endpoint: http://opentelemetry-collector-opentelemetry-gateway.opentelemetry.svc.cluster.local:4318

    service:
      telemetry:
        <<: *otelTelemetry
      pipelines:
        metrics:
          receivers:
          # - otlp
          - prometheus
          processors:
          - resourcedetection
          - k8sattributes
          - memory_limiter
          - transform
          - batch
          exporters:
          - debug
          - otlphttp

  ports:
    otlp:
      enabled: false
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: false
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-metrics-cluster:
  additionalLabels:
    app.kubernetes.io/part-of: opentelemetry-collector
    portefaix.xyz/version: v0.54.0

  mode: deployment
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: true
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: true
    clusterMetrics:
      enabled: true

  extraEnvs:
  <<: *otelExtraEnvs

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp: null
      #   protocols:
      #     grpc:
      #       endpoint: ${env:MY_POD_IP}:4317
      #     http:
      #       endpoint: ${env:MY_POD_IP}:4318
      k8s_cluster:
        allocatable_types_to_report:
        - cpu
        - memory
        - storage
        node_conditions_to_report:
        - Ready
        - MemoryPressure
        - DiskPressure
        - NetworkUnavailable
      k8sobjects:
        objects:
        - exclude_watch_type:
          - DELETED
          group: events.k8s.io
          mode: watch
          name: events

    processors:
      <<: *otelResourcedetection
      <<: *otelK8sAttributes
      transform:
        metric_statements:
        - context: resource
          statements:
          - set(attributes["k8s.cluster.name"], "${CLUSTER_NAME}")
          - set(attributes["cluster"], "${CLUSTER_NAME}")

    exporters:
      otlphttp:
        endpoint: http://opentelemetry-collector-opentelemetry-gateway.opentelemetry.svc.cluster.local:4318

    service:
      telemetry:
        <<: *otelTelemetry
      pipelines:
        logs:
          receivers:
          - k8sobjects
          processors:
          - resourcedetection
          - k8sattributes
          - memory_limiter
          - batch
          exporters:
          - debug
          - otlphttp
        metrics:
          receivers:
          # - otlp
          - prometheus
          - k8s_cluster
          processors:
          - resourcedetection
          - k8sattributes
          - memory_limiter
          - transform
          - batch
          exporters:
          - debug
          - otlphttp

  ports:
    otlp:
      enabled: false
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: false
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-traces:
  additionalLabels:
    app.kubernetes.io/part-of: opentelemetry-collector
    portefaix.xyz/version: v0.54.0

  mode: deployment
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: false
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: false

  extraEnvs:
  <<: *otelExtraEnvs

  config:
    receivers:
      jaeger:
      zipkin:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    processors:
      <<: *otelResourcedetection
      <<: *otelK8sAttributes
      transform:
        trace_statements:
        - context: resource
          statements:
          - set(attributes["k8s.cluster.name"], "${CLUSTER_NAME}")
          - set(attributes["cluster"], "${CLUSTER_NAME}")

    exporters:
      otlphttp:
        endpoint: http://opentelemetry-collector-opentelemetry-gateway.opentelemetry.svc.cluster.local:4318

    connectors:
      datadog/connector:

    service:
      telemetry:
        <<: *otelTelemetry
      pipelines:
        traces:
          receivers:
          - otlp
          processors:
          - resourcedetection
          - k8sattributes
          - memory_limiter
          - transform
          - batch
          exporters:
          - debug
          - otlphttp
        traces/sampling:
          receivers:
          - otlp
          processors:
          - resourcedetection
          - k8sattributes
          - memory_limiter
          - transform
          - batch
          exporters:
          - debug
          - otlphttp

  ports:
    otlp:
      enabled: true
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: true
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-gateway:
  additionalLabels:
    app.kubernetes.io/part-of: opentelemetry-collector
    portefaix.xyz/version: v0.54.0

  mode: daemonset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: false
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: false

  extraEnvs:
  <<: *otelExtraEnvs

  extraEnvsFrom:
  - secretRef:
      name: opentelemetry-datadog-credentials
  - secretRef:
      name: opentelemetry-lightstep-credentials
  - secretRef:
      name: opentelemetry-grafanacloud-credentials
  - secretRef:
      name: opentelemetry-kloudmate-credentials

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318

    processors:
      batch/datadog:
        send_batch_max_size: 100
        send_batch_size: 10
        timeout: 10s

    extensions:
      basicauth/grafana_cloud:
        client_auth:
          username: "${env:GRAFANA_CLOUD_OTEL_COLLECTOR_ID}"
          password: "${env:GRAFANA_CLOUD_OTEL_COLLECTOR_TOKEN}"
      # bearertokenauth/dash0:
      #   scheme: Bearer
      #   token: ${env:DASH0_AUTHORIZATION_TOKEN}
      # opamp/lightstep:
      #   server:
      #     ws:
      #       endpoint: "wss://opamp.lightstep.com/v1/opamp"
      #       headers:
      #         Authorization: "bearer ${LS_OPAMP_API_KEY}"


    exporters:
    #   datadog:
    #     metrics:
    #       resource_attributes_as_tags: true
    #       histograms:
    #         mode: distributions
    #     api:
    #       key: ${env:DD_API_KEY}
    #       site: "datadoghq.com"
    #
      otlphttp/datadog:
        endpoint: https://api.datadoghq.com/api/intake/otlp/v1/metrics
        headers:
          dd-api-key: ${env:DD_API_KEY}
          dd-otel-metric-config: "{resource_attributes_as_tags: true}"
          dd-otlp-source: "datadoghq.com"

      otlphttp/grafana_cloud:
        endpoint: https://otlp-gateway-prod-eu-west-0.grafana.net/otlp
        auth:
          authenticator: basicauth/grafana_cloud

      otlp/honeycomb_logs:
        endpoint: "api.honeycomb.io:443"
        headers:
          "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
          "x-honeycomb-dataset": "portefaix-homelab-logs"
      otlp/honeycomb_metrics:
        endpoint: "api.honeycomb.io:443"
        headers:
          "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
          "x-honeycomb-dataset": "portefaix-homelab-metrics"
      otlp/honeycomb_traces:
        endpoint: "api.honeycomb.io:443"
        headers:
          "x-honeycomb-team": "${HONEYCOMB_API_KEY}"
          "x-honeycomb-dataset": "portefaix-homelab-traces"

      otlp/lightstep:
        endpoint: ingest.lightstep.com:443
        headers:
          "lightstep-access-token": "${LS_TOKEN}"

      # otlphttp/dash0:
      #   auth:
      #     authenticator: bearertokenauth/dash0
      #   endpoint: https://ingress.eu-west-1.aws.dash0.com
      # otlp/dash0:
      #   auth:
      #     authenticator: bearertokenauth/dash0
      #   endpoint: ingress.eu-west-1.aws.dash0.com:4317

      otlphttp/kloudmate:
        endpoint: https://otel.kloudmate.com:4318
        headers:
          Authorization: "${env:KLOUDMATE_API_KEY}"

    service:
      telemetry:
        <<: *otelTelemetry

      extensions:
      - health_check
      # - opamp/lightstep
      - basicauth/grafana_cloud

      pipelines:
        logs:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          - batch/datadog
          exporters:
          - debug
          # - datadog
          - otlphttp/grafana_cloud
          # - otlp/honeycomb_logs
          - otlp/lightstep
          # - otlp/dash0
          # - otlphttp/dash0
          - otlphttp/kloudmate
        metrics:
          receivers:
          - otlp
          - prometheus
          processors:
          - memory_limiter
          - batch
          - batch/datadog
          exporters:
          - debug
          # - datadog
          - otlphttp/grafana_cloud
          # - otlp/honeycomb_metrics
          - otlp/lightstep
          # - otlp/dash0
          # - otlphttp/dash0
          - otlphttp/kloudmate
        traces:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          - batch/datadog
          exporters:
          - debug
          # - datadog
          - otlphttp/grafana_cloud
          # - otlp/honeycomb_traces
          - otlp/lightstep
          # - otlp/dash0
          # - otlphttp/dash0
          - otlphttp/kloudmate

  ports:
    otlp:
      enabled: true
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: true
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix
