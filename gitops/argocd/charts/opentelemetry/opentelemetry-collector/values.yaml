---
# SPDX-FileCopyrightText: Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
# SPDX-License-Identifier: Apache-2.0

grafanaDashboard:
  enabled: true
  grafanaOperator:
    enabled: true
    matchLabels:
      grafana.com/dashboards: portefaix


opentelemetry:
  k8sattributes:
    pod_association:
    - sources:
      - from: resource_attribute
        name: k8s.pod.ip

    extract:
      metadata:
      - k8s.pod.name
      - k8s.pod.uid
      - k8s.deployment.name
      - k8s.node.name
      - k8s.namespace.name
      - k8s.pod.start_time
      - k8s.replicaset.name
      - k8s.replicaset.uid
      - k8s.daemonset.name
      - k8s.daemonset.uid
      - k8s.job.name
      - k8s.job.uid
      - k8s.cronjob.name
      - k8s.statefulset.name
      - k8s.statefulset.uid
      - container.image.name
      - container.image.tag
      - container.id
      - k8s.container.name
      - container.image.name
      - container.image.tag
      - container.id
      labels:
      - tag_name: kube_app_name
        key: app.kubernetes.io/name
        from: pod
      - tag_name: kube_app_instance
        key: app.kubernetes.io/instance
        from: pod
      - tag_name: kube_app_version
        key: app.kubernetes.io/version
        from: pod
      - tag_name: kube_app_component
        key: app.kubernetes.io/component
        from: pod
      - tag_name: kube_app_part_of
        key: app.kubernetes.io/part-of
        from: pod
      - tag_name: kube_app_managed_by
        key: app.kubernetes.io/managed-by
        from: pod

opentelemetry-logs:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: daemonset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: true
      includeCollectorLogs: true
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: false
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: false

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp: null
    #   filelog:
    #     include_file_path: true
    #     include_file_name: false
    #     include:
    #     - /var/log/pods/*/*/*.log
    #     operators:
    #     - id: container-parser
    #       type: container
    #   prometheus:
    #     config:
    #       scrape_configs:
    #         - job_name: opentelemetry-collector
    #           scrape_interval: 10s
    #           static_configs:
    #             - targets:
    #                 - ${env:MY_POD_IP}:8888
    processors:
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false
    exporters:
      otlphttp:
        endpoint: http://opentelemetry-collector-opentelemetry-gateway.opentelemetry.svc.cluster.local:4318
    service:
      telemetry:
        logs:
          encoding: "json"
        metrics:
          address: ${env:MY_POD_IP}:8888
      pipelines:
        logs:
          receivers:
          - filelog
          processors:
          - resourcedetection
          - memory_limiter
          - batch
          exporters:
          - debug
          - otlphttp
        metrics: null
        traces: null

  ports:
    otlp:
      enabled: false
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: false
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-metrics:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: daemonset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: true
    kubernetesAttributes:
      enabled: true
    kubeletMetrics:
      enabled: true
    kubernetesEvents:
      enabled: true
    clusterMetrics:
      enabled: false

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp: null
      #   protocols:
      #     grpc:
      #       endpoint: ${env:MY_POD_IP}:4317
      #     http:
      #       endpoint: ${env:MY_POD_IP}:4318

    processors:
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false

    exporters:
      otlp:
        endpoint: http://opentelemetry-collector-opentelemetry-gateway.opentelemetry.svc.cluster.local:4318

    service:
      telemetry:
        logs:
          encoding: "json"
        metrics:
          address: ${env:MY_POD_IP}:8888
      pipelines:
        metrics:
          receivers:
          # - otlp
          - prometheus
          processors:
          - resourcedetection
          - memory_limiter
          - batch
          exporters:
          - debug
          - otlp

  ports:
    otlp:
      enabled: false
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: false
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-metrics-cluster:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: deployment
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: true
    kubernetesAttributes:
      enabled: true
    kubeletMetrics:
      enabled: true
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: true

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp: null
      #   protocols:
      #     grpc:
      #       endpoint: ${env:MY_POD_IP}:4317
      #     http:
      #       endpoint: ${env:MY_POD_IP}:4318

    processors:
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false

    exporters:
      otlp:
        endpoint: http://opentelemetry-collector-opentelemetry-gateway.opentelemetry.svc.cluster.local:4318

    service:
      telemetry:
        logs:
          encoding: "json"
        metrics:
          address: ${env:MY_POD_IP}:8888
      pipelines:
        metrics:
          receivers:
          # - otlp
          - prometheus
          processors:
          - resourcedetection
          - memory_limiter
          - batch
          exporters:
          - debug
          - otlp

  ports:
    otlp:
      enabled: false
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: false
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-traces:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: deployment
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: false
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: false

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    processors:
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false

    exporters:
      otlp:
        endpoint: http://opentelemetry-collector-opentelemetry-gateway.opentelemetry.svc.cluster.local:4318

    connectors:
      datadog/connector:

    service:
      telemetry:
        logs:
          encoding: "json"
        metrics:
          address: ${env:MY_POD_IP}:8888
      pipelines:
        traces:
          receivers:
          - otlp
          processors:
          - resourcedetection
          - batch
          exporters:
          - debug
          - otlp
        traces/sampling:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          exporters:
          - debug
          - otlp

  ports:
    otlp:
      enabled: true
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: true
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-gateway:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: daemonset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: false
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: false

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace
  - name: DD_SITE
    value: "datadoghq.com"

  extraEnvsFrom:
  - secretRef:
      name: opentelemetry-datadog-credentials
  # - secretRef:
  #     name: opentelemetry-lightstep-credentials
  # - secretRef:
  #     name: opentelemetry-grafanacloud-credentials

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318

    processors:
      batch/datadog:
        send_batch_max_size: 100
        send_batch_size: 10
        timeout: 10s

    exporters:
      datadog:
        metrics:
          resource_attributes_as_tags: true
          histograms:
            mode: distributions
        api:
          key: ${env:DD_API_KEY}
          site: "${env:DD_SITE}"

    connectors:
      datadog/connector:

    service:
      telemetry:
        logs:
          level: info
          encoding: json
        metrics:
          address: ${env:MY_POD_IP}:8888
      pipelines:
        logs:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          - batch/datadog
          exporters:
          - debug
          # - datadog
        metrics:
          receivers:
          - otlp
          - prometheus
          processors:
          - memory_limiter
          - batch
          - batch/datadog
          exporters:
          - debug
          # - datadog
        traces:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          - batch/datadog
          exporters:
          - debug
          # - datadog
        traces/sampling:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          exporters:
          - debug
          # - datadog

  ports:
    otlp:
      enabled: true
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: true
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP

  service:
    enabled: true

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix
