---
# SPDX-FileCopyrightText: Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
# SPDX-License-Identifier: Apache-2.0

grafanaDashboard:
  enabled: true
  grafanaOperator:
    enabled: true
    matchLabels:
      grafana.com/dashboards: portefaix


opentelemetry-logs:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: daemonset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: true
      includeCollectorLogs: true
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: false
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: true
    clusterMetrics:
      enabled: false

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace

  config:
    receivers:
      filelog:
        include_file_path: true
        include_file_name: false
        include:
        - /var/log/pods/*/*/*.log
        operators:
        - id: container-parser
          type: container
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false
    exporters:
      debug: {}
      otlphttp:
        endpoint: http://opentelemetry-gateway.opentelemetry.svc.cluster.local:4318
        headers:
          dd-protocol: "otlp"
          dd-api-key: ${env:DD_API_KEY}
          dd-otel-span-mapping: "{span_name_as_resource_name: false}"
          dd-otlp-source: "${env:DD_SITE}"
    service:
      telemetry:
        logs:
          encoding: "json"
          initial_fields:
          - service: "otel-collector"
        metrics:
          address: ${env:MY_POD_IP}:8888
      extensions:
      - health_check
      pipelines:
        logs:
          receivers:
          - filelog
          processors:
          - memory_limiter
          - batch
          exporters:
          - debug
          - otlphttp

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-metrics:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: daemonset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: true
    kubernetesAttributes:
      enabled: true
    kubeletMetrics:
      enabled: true
    kubernetesEvents:
      enabled: true
    clusterMetrics:
      enabled: false

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace

  config:
    receivers:
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false
    exporters:
      debug: {}
    service:
      telemetry:
        logs:
          encoding: "json"
          initial_fields:
          - service: "otel-collector"
        metrics:
          address: ${env:MY_POD_IP}:8888
      extensions:
      - health_check
      pipelines:
        metrics:
          receivers:
          - otlp
          - prometheus
          processors:
          - resourcedetection
          - memory_limiter
          - batch
          exporters:
          - debug
          - otlp

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-metrics-cluster:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: deployment
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: true
    kubernetesAttributes:
      enabled: true
    kubeletMetrics:
      enabled: true
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: true

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace

  config:
    receivers:
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false
    exporters:
      debug: {}
    service:
      telemetry:
        logs:
          encoding: "json"
          initial_fields:
          - service: "otel-collector"
        metrics:
          address: ${env:MY_POD_IP}:8888
      extensions:
      - health_check
      pipelines:
        metrics:
          receivers:
          - otlp
          - prometheus
          processors:
          - resourcedetection
          - memory_limiter
          - batch
          exporters:
          - debug
          - otlp

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-traces:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: deployment
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: false
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: false

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false
    exporters:
      debug: {}
    connectors:
      datadog/connector:
    service:
      telemetry:
        logs:
          encoding: "json"
          initial_fields:
          - service: "otel-collector"
        metrics:
          address: ${env:MY_POD_IP}:8888
      extensions:
      - health_check
      pipelines:
        traces:
          receivers:
          - otlp
          processors:
          - resourcedetection
          - batch
          exporters:
          - debug
          - otlp
        traces/sampling:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          exporters:
          - debug
          - otlp

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

opentelemetry-gateway:
  additionalLabels:
    portefaix.xyz/version: v0.54.0

  mode: daemonset
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib

  useGOMEMLIMIT: true

  presets:
    logsCollection:
      enabled: false
    hostMetrics:
      enabled: false
    kubernetesAttributes:
      enabled: false
    kubeletMetrics:
      enabled: false
    kubernetesEvents:
      enabled: false
    clusterMetrics:
      enabled: false

  extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace
  - name: DD_SITE
    value: "datadoghq.com"

  extraEnvsFrom:
  - secretRef:
      name: opentelemetry-datadog-credentials
  # - secretRef:
  #     name: opentelemetry-lightstep-credentials
  # - secretRef:
  #     name: opentelemetry-grafanacloud-credentials

  config:
    receivers:
      jaeger: null
      zipkin: null
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false
    exporters:
      debug: {}
      datadog:
        metrics:
          resource_attributes_as_tags: true
          histograms:
            mode: "counters"
            send_count_sum_metrics: true
        api:
          key: ${env:DD_API_KEY}
          site: "${env:DD_SITE}"
    connectors:
      datadog/connector:
    service:
      telemetry:
        logs:
          encoding: "json"
        metrics:
          address: ${env:MY_POD_IP}:8888
      extensions:
      - health_check
      pipelines:
        logs:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          exporters:
          - debug
          - datadog
        metrics:
          receivers:
          - otlp
          - prometheus
          processors:
          - resourcedetection
          - memory_limiter
          - batch
          exporters:
          - debug
          - datadog
        traces:
          receivers:
          - otlp
          processors:
          - resourcedetection
          - batch
          exporters:
          - debug
        traces/sampling:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          exporters:
          - datadog

  serviceMonitor:
    enabled: true
    extraLabels:
      prometheus.io/operator: portefaix

  prometheusRule:
    enabled: true
    groups: []
    defaultRules:
      enabled: true
    extraLabels:
      prometheus.io/operator: portefaix
