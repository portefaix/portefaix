{{ define "agent.config.metrics" }}

mimir.rules.kubernetes "local" {
  address = {{ .Values.observability.metrics.prometheusRules | quote }}
  tenant_id = {{ .Values.observability.cluster_name | quote }}

  rule_selector {
    match_labels = {
      monitoring = "portefaix",
    }
  }
}

// ********************************************
// * O P E N T E L E M E T R Y / M E T R I C S
// ********************************************

otelcol.receiver.otlp "core" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }
  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    metrics = [otelcol.processor.batch.core.input]
  }
}

otelcol.processor.batch "core" {
  send_batch_max_size = 1000
  timeout = "15s"
  send_batch_size = 800

  output {
    metrics = [otelcol.processor.attributes.core.input]
  }
}

otelcol.processor.attributes "core" {
  action {
    key = "cluster"
    value = {{ .Values.observability.cluster_name | quote }}
    action = "insert"
  }

  output {
    traces = [otelcol.processor.k8sattributes.core.input]
  }
}

otelcol.processor.k8sattributes "core" {
  extract {
    metadata = [
      "k8s.namespace.name",
      "k8s.pod.name",
      "k8s.deployment.name",
      "k8s.statefulset.name",
      "k8s.daemonset.name",
      "k8s.cronjob.name",
      "k8s.job.name",
      "k8s.node.name",
      "k8s.pod.uid",
      "k8s.pod.start_time",
    ]
  }

  pod_association {
    source {
      from = "connection"
    }
  }

  output {
    traces = [otelcol.processor.memory_limiter.core.input]
  }
}

otelcol.processor.memory_limiter "core" {
  limit_percentage = 90
  spike_limit_percentage = 30
  check_interval = "5s"

  output {
    metrics = [
      otelcol.exporter.prometheus.core.input,
    ]
  }
}

otelcol.exporter.prometheus "core" {
  forward_to = [
    prometheus.remote_write.local.receiver,
    // prometheus.remote_write.grafana_cloud.receiver,
  ]
}

{{ end }}
