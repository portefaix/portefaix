{{ define "agent.config.logs" }}

// /////////////////////////////////////////
// Modules

module.git "log_targets" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/targets/logs-from-worker.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.log_format_json.exports.process.receiver,
    ]
  }
}


// Logs formats

module.git "log_format_json" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/log-formats/json.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.log_format_klog.exports.process.receiver,
    ]
  }
}

module.git "log_format_klog" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/log-formats/klog.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.log_format_logfmt.exports.process.receiver,
    ]
  }
}

module.git "log_format_logfmt" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/log-formats/logfmt.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.log_format_logjson.exports.process.receiver,
    ]
  }
}

module.git "log_format_logjson" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/log-formats/json.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.log_format_otel.exports.process.receiver,
    ]
  }
}

module.git "log_format_otel" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/log-formats/otel.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.log_level_default.exports.process.receiver,
    ]
  }
}

// Extracts labels

module.git "log_level_default" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/labels/log-level.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.scrub_all.exports.process.receiver,
    ]
  }
}

module.git "drop_levels" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/drops/levels.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.scrub_all.exports.process.receiver,
    ]
  }
}

module.git "scrub_all" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/scrubs/all.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.embed_pod.exports.process.receiver,
    ]
  }
}

module.git "embed_pod" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/embed/pod.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      module.git.label_keep.exports.process.receiver,
    ]
  }
}

module.git "label_keep" {
  repository = "https://github.com/grafana/agent-modules.git"
  revision = "{{ .Values.observability.agent.modules.revision }}"
  path = "modules/kubernetes/logs/labels/keep-labels.river"
  pull_frequency = "{{ .Values.observability.agent.modules.pull_frequency }}"

  arguments {
    forward_to = [
      loki.write.local.receiver,
      // loki.write.grafana_cloud.receiver,
      // otelcol.receiver.loki.quickwit_logs.receiver,
    ]
    keep_labels = [
      "app",
      "cluster",
      "component",
      "container",
      "deployment",
      "env",
      "filename",
      "instance",
      "job",
      "level",
      "log_type",
      "namespace",
      "node_name",
      "pod",
      "region",
      "service",
    ]
  }
}

otelcol.receiver.loki "quickwit_logs" {
  output {
    logs = [
      otelcol.exporter.otlp.local_quickwit_logs.input,
    ]
  }
}

// ********************************************
// * O P E N T E L E M E T R Y / L O G S
// ********************************************

otelcol.receiver.otlp "core" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }
  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    logs = [otelcol.processor.batch.core.input]
  }
}

otelcol.processor.batch "core" {
  send_batch_max_size = 1000
  timeout = "15s"
  send_batch_size = 800

  output {
    logs = [otelcol.processor.attributes.core.input]
  }
}

otelcol.processor.attributes "core" {
  action {
    key = "cluster"
    // value = {{ .Values.observability.cluster_name | quote }}
    value = local.file.cluster_name.content
    action = "insert"
  }

  output {
    logs = [otelcol.processor.k8sattributes.core.input]
  }
}

otelcol.processor.k8sattributes "core" {
  extract {
    metadata = [
      "k8s.namespace.name",
      "k8s.pod.name",
      "k8s.deployment.name",
      "k8s.statefulset.name",
      "k8s.daemonset.name",
      "k8s.cronjob.name",
      "k8s.job.name",
      "k8s.node.name",
      "k8s.pod.uid",
      "k8s.pod.start_time",
    ]
  }

  pod_association {
    source {
      from = "connection"
    }
  }

  output {
    logs = [otelcol.processor.transform.add_attributes.input]
  }
}

otelcol.processor.transform "add_attributes" {
  // Grafana Cloud Kubernetes monitoring expects Loki labels `cluster`, `pod`, and `namespace`
  error_mode = "ignore"
  log_statements {
    context = "resource"
    statements = [
      "set(attributes[\"pod\"], attributes[\"k8s.pod.name\"])",
      "set(attributes[\"namespace\"], attributes[\"k8s.namespace.name\"])",
      "set(attributes[\"loki.resource.labels\"], \"pod, namespace, cluster, job\")",
    ]
  }
  output {
    logs = [otelcol.processor.memory_limiter.core.input]
  }
}

otelcol.processor.memory_limiter "core" {
  limit_percentage = 90
  spike_limit_percentage = 30
  check_interval = "5s"

  output {
    logs = [
      otelcol.exporter.loki.core.input,
      otelcol.exporter.otlp.local_quickwit_logs.input,
    ]
  }
}

otelcol.exporter.loki "core" {
  forward_to = [
    loki.write.local.receiver,
    // loki.write.grafana_cloud.receiver,
  ]
}

{{ end }}
