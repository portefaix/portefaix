# Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

---
ingress:
  enabled: true
  entries:
  - name: backstage-external
    host: backstage.home.portefaix.xyz
    className: nginx
    annotations:
      hajimari.io/enable: "true"
      hajimari.io/icon: "simple-icons:backstage"
      hajimari.io/appName: "Backstage"
      hajimari.io/group: "Community"
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
    labels: {}
  - name: backstage-cloudflare
    host: backstage.home.k3s.portefaix.xyz
    className: nginx
    annotations:
      external-dns.alpha.kubernetes.io/hostname: backstage.home.k3s.portefaix.xyz
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/auth-url: |-
        http://authentik.identity.svc.cluster.local/outpost.goauthentik.io/auth/nginx
      nginx.ingress.kubernetes.io/auth-signin: |-
        http://authentik.homelab.k3s.portefaix.xyz/outpost.goauthentik.io/start?rd=$escaped_request_uri
      nginx.ingress.kubernetes.io/auth-response-headers: |-
        Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
      nginx.ingress.kubernetes.io/auth-snippet: |
        proxy_set_header X-Forwarded-Host $http_host;
    labels:
      external-dns.io/provider: cloudflare

backstage:
  ingress:
    enabled: true
    className: nginx
    host: backstage.192.168.0.62.nip.io

  backstage:
    resources:
      limits:
        memory: 512Mi
      requests:
        memory: 250Mi
        cpu: 50m
    extraEnvVars:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: backstage-credentials
          key: github-token
    - name: AUTH_GITHUB_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: backstage-credentials
          key: github-client-id
    - name: AUTH_GITHUB_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: backstage-credentials
          key: github-client-secret
    - name: ARGOCD_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: backstage-credentials
          key: argocd-token
    - name: BASE_URL
      value: http://backstage.homelab.portefaix.xyz

    appConfig:
      app:
        title: Portefaix
        baseUrl: ${BASE_URL}
        support:
          url: https://portefaix.xyz
          items:
          - title: Portefaix Documentation
            icon: docs
            links:
            - url: https://portefaix.xyz
              title: Documentation
      organization:
        name: Portefaix
      backend:
        baseUrl: ${BASE_URL}
        listen:
          port: 7007
          host: 0.0.0.0
        csp:
          connect-src: ["'self'", 'http:', 'https:']
          img-src: ["'self'", 'data:', 'https://avatars.githubusercontent.com']
        cors:
          origin: ${BASE_URL}
          methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
          credentials: true
        cache:
          store: memory
        database:
          client: better-sqlite3
          connection: ':memory:'
        #   client: pg
        #   connection:
        #     host: ${POSTGRES_HOST}
        #     port: ${POSTGRES_PORT}
        #     user: ${POSTGRES_USER}
        #     password: ${POSTGRES_PASSWORD}
      integrations:
        github:
        - host: github.com
          token: ${GITHUB_TOKEN}
      auth:
        environment: production
        providers:
          github:
            production:
              clientId: ${AUTH_GITHUB_CLIENT_ID}
              clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
      techdocs:
        builder: 'local'
        generators:
          techdocs: 'docker'
        publisher:
          type: 'local'
      catalog:
        readonly: true
        rules:
        - allow: [Component, API, System, Domain, Resource, Location, User, Group, Template]
        locations:
        - type: url
          target: https://github.com/portefaix/portefaix-backstage/blob/main/catalog/catalog-info.yaml
          # providers:
          #   github:
          #     GitHub:
          #       host: github.com
          #       schedule:
          #         frequency:
          #           minutes: 10
          #         timeout:
          #           minutes: 10
      proxy:
        '/argocd/api':
          target: http://argo-cd-argocd-server.gitops.svc.cluster.local:80/api/v1/
          changeOrigin: true
          secure: false
          headers:
            Cookie:
              $env: ARGOCD_AUTH_TOKEN
        '/prometheus/api':
          target: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090/api/v1
      homepage:
        clocks:
        - label: UTC
          timezone: UTC
        - label: PRS
          timezone: 'Europe/Paris'

    # args:
    #   - '--config'
    #   - '/app/app-config.yaml'
    #   - '--config'
    #   - '/app/app-config.production.yaml'

  # postgresql:
  #   global:
  #     storageClass: nfs-client
  #   primary:
  #     resources:
  #       limits:
  #         memory: 512Mi
  #       requests:
  #         memory: 256Mi
  #         cpu: 250m
  #     # podSecurityContext:
  #     #   enabled: true
  #     #   # fsGroup: 1001
  #     #   runAsUser: 0 #1001
  #     # containerSecurityContext:
  #     #   enabled: true
  #     #   runAsUser: 0 #1001
  #   # volumePermissions:
  #   #   enabled: true
  #   #   securityContext:
  #   #     runAsUser: 0
  #   metrics:
  #     resources:
  #       limits:
  #         memory: 300Mi
  #       requests:
  #         memory: 50Mi
  #         cpu: 100m
