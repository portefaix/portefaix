# Copyright (C) 2021 Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: GCP / Terraform deploy

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment'
        required: true
        default: 'prod'
      tf_version:
        description: "Terraform version"
        required: true
        default: '0.14.0'

jobs:
  gcp_vpc:
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "VPC on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    # - name: Terraform Format
    #   id: fmt
    #   run: terraform fmt -check
    #   working-directory: terraform/gcp/vpc/terraform

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/vpc/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/vpc/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/vpc/terraform

  gcp_cloud_dns:
    needs: gcp_vpc
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Cloud DNS on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/dns/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/dns/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/dns/terraform

  gcp_external_ip_cloud_nat:
    needs: gcp_vpc
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "External IP for Cloud NAT on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/external-ips/cloud-nat/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/external-ips/cloud-nat/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/external-ips/cloud-nat/terraform

  gcp_cloud_nat:
    needs: gcp_external_ip_cloud_nat
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Cloud NAT on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/cloud-nat/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/cloud-nat/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/cloud-nat/terraform

  gcp_gke:
    needs: gcp_cloud_nat
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "GKE on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/gke/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/gke/terraform
      env:
        TF_VAR_master_authorized_networks: "[{\"cidr_block\": \"${{ secrets.HOME_IP_ADDRESS }}\", \"display_name\": \"Home\"}]"

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/gke/terraform
      env:
        TF_VAR_master_authorized_networks: "[{\"cidr_block\": \"${{ secrets.HOME_IP_ADDRESS }}\", \"display_name\": \"Home\"}]"

  gcp_sops:
    needs: gcp_gke
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Deploy Sops on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/sops/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/sops/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/sops/terraform

  gcp_observability:
    needs: gcp_gke
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Deploy Observability on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/observability/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/observability/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/observability/terraform

  gcp_cert_manager:
    needs: gcp_gke
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Deploy CertManager on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/cert-manager/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/cert-manager/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/cert-manager/terraform

  gcp_external_dns:
    needs: gcp_gke
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Deploy External DNS on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/external-dns/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/external-dns/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/external-dns/terraform

  gcp_velero:
    needs: gcp_gke
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Deploy Velero on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/velero/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/velero/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/velero/terraform

  gcp_vector:
    needs: gcp_gke
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Deploy Vector on GCP / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/vector/terraform

    - name: Terraform Plan
      run: terraform plan -no-color -input=false -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/vector/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/vector/terraform

  # TODO: Whitelist Github Actions IP

  gcp_k8s:
    needs:
      - gcp_sops
      - gcp_observability
      - gcp_cert_manager
      - gcp_external_dns
      - gcp_velero
      - gcp_vector

    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Deploy Kubernetes applications on GKE / ${{ github.event.inputs.env }}"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ github.event.inputs.tf_version }}

    - name: Configure GCP credentials
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        version: 324.0.0
        service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
        export_default_credentials: true

    - name: Public IP
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Print Public IP
      run: |
        echo ${{ steps.ip.outputs.ipv4 }}
        echo ${{ steps.ip.outputs.ipv6 }}

    - name: Terraform Init
      run: terraform init -upgrade -input=false -reconfigure -backend-config=backend-vars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/gke/terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve -var-file=tfvars/${{ github.event.inputs.env }}.tfvars
      working-directory: terraform/gcp/gke/terraform
      env:
        TF_VAR_master_authorized_networks: "[{\"cidr_block\": \"${{ secrets.HOME_IP_ADDRESS }}\", \"display_name\": \"Home\"}, {\"cidr_block\": \"${{ steps.ip.outputs.ipv4 }}/32\", \"display_name\": \"Github Action runner\"}]"

    - name: Deploy Kubernetes applications
      run: |
        ./hack/scripts/terraform-helm.sh gcp prod apply
